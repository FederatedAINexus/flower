"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import flwr.proto.clientappio_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ClientAppIoStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetToken: grpc.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.GetTokenRequest,
        flwr.proto.clientappio_pb2.GetTokenResponse,
    ]
    """Get token"""

    PullClientAppInputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.PullClientAppInputsRequest,
        flwr.proto.clientappio_pb2.PullClientAppInputsResponse,
    ]
    """Get Message, Context, and Run"""

    PushClientAppOutputs: grpc.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.PushClientAppOutputsRequest,
        flwr.proto.clientappio_pb2.PushClientAppOutputsResponse,
    ]
    """Send updated Message and Context"""

class ClientAppIoAsyncStub:
    GetToken: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.GetTokenRequest,
        flwr.proto.clientappio_pb2.GetTokenResponse,
    ]
    """Get token"""

    PullClientAppInputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.PullClientAppInputsRequest,
        flwr.proto.clientappio_pb2.PullClientAppInputsResponse,
    ]
    """Get Message, Context, and Run"""

    PushClientAppOutputs: grpc.aio.UnaryUnaryMultiCallable[
        flwr.proto.clientappio_pb2.PushClientAppOutputsRequest,
        flwr.proto.clientappio_pb2.PushClientAppOutputsResponse,
    ]
    """Send updated Message and Context"""

class ClientAppIoServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetToken(
        self,
        request: flwr.proto.clientappio_pb2.GetTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.clientappio_pb2.GetTokenResponse, collections.abc.Awaitable[flwr.proto.clientappio_pb2.GetTokenResponse]]:
        """Get token"""

    @abc.abstractmethod
    def PullClientAppInputs(
        self,
        request: flwr.proto.clientappio_pb2.PullClientAppInputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.clientappio_pb2.PullClientAppInputsResponse, collections.abc.Awaitable[flwr.proto.clientappio_pb2.PullClientAppInputsResponse]]:
        """Get Message, Context, and Run"""

    @abc.abstractmethod
    def PushClientAppOutputs(
        self,
        request: flwr.proto.clientappio_pb2.PushClientAppOutputsRequest,
        context: _ServicerContext,
    ) -> typing.Union[flwr.proto.clientappio_pb2.PushClientAppOutputsResponse, collections.abc.Awaitable[flwr.proto.clientappio_pb2.PushClientAppOutputsResponse]]:
        """Send updated Message and Context"""

def add_ClientAppIoServicer_to_server(servicer: ClientAppIoServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
