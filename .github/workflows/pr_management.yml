name: PR Management

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]

jobs:
  ensure-draft:
    name: Ensure draft
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure PR is draft
        if: github.event.pull_request.draft == false
        run: gh pr ready ${{ github.event.pull_request.number }} --undo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  assign-author:
    name: Assign author
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' }}
    steps:
      - uses: toshimaru/auto-author-assign@v2.1.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  pr_title_check:
    name: Check title format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Bootstrap
        uses: ./.github/actions/bootstrap
        with:
          python-version: 3.11
          poetry-skip: 'true'
      - name: Check PR title format 
        run: python ./dev/check_pr_title.py "${{ github.event.pull_request.title }}"

  enforce-labels:
    name: Check labels
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
    - name: Ensure PR has labels
      id: check_labels
      run: |
        if [ "$(jq '.pull_request.labels | length' $GITHUB_EVENT_PATH)" -eq "0" ]; then
          echo "No labels found. Please add a label to this PR."
          exit 1
        fi

  check-merge-conflicts:
    name: Check conflicts
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' || github.event.action == 'synchronize' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check for merge conflicts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          if [ "$(git ls-files -u | wc -l)" != "0" ]; then
            # Move PR to draft if there are conflicts
            gh pr ready ${{ github.event.pull_request.number }} --undo
          fi

  check-failing-ci:
    name: Check CI
    runs-on: ubuntu-latest
    steps:
      - name: Check if CI is failing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sha_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/adap/flower/pulls/$1")
          sha=$(echo "$sha_response" | jq -r '.head.sha')

          status_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/repos/adap/flower/commits/$sha/check-runs")

          num_failures=$(echo "$status_response" | jq '[.check_runs[] | select(.conclusion == "failure")] | length')

          if [ "$num_failures" != "0" ]; then
            gh pr ready ${{ github.event.pull_request.number }} --undo
          fi

  assign-reviewers:
    name: Assign reviewers
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'ready_for_review' }}
    needs: enforce-labels
    permissions:
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Parse PR labels and assign reviewers
        run: |
          gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
          python dev/assign_reviewers.py .github/CODEREVIEWERS \
                                     ${{ github.event.pull_request.number }} \
                                     ${{ github.event_path }}
